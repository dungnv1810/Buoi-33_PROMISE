Promise và async...await.
promise: Lời hứa. (chưa được thực hiện được ngay)
1: Định nghĩa: là một đối tượng sử dụng trong bài toán bất đồng bộ
"bất đồng bộ" : 1 - 3 - 2 - 4
                3 - 4 - 6 -5
"tác vụ bất đồng bộ" => là 1 tác vụ cần có một thời gian để thực hiện (không thể thực hiện xong ngay được)
==> promise đại diện cho một tiến trình không thể hoàn thành được ngay, trong tương lai promise sẽ đựơc trả về 
giá trị đã được thực thi gọi là (resolve), hoặc không được thực thi thì gọi là (reject).
- "Nếu con ngoan, Bố hứa sẽ mua cho con một chiếc Ô TÔ đồ chơi siêu to khổng lồ vào tuần sau".
    + pending: lời hứa đang ở trong trạng thái đợi (không biết thực hiện được không).
==> resolve: lời hứa đã được thực hiện thành công 
==> reject: đã được thực hiện lời hứa, không thành công 

2. Khai báo promise 
const <tenpromise> = new Promise((resolve, reject)=>{
    if(true){
        resolve(tham so 1, tham so 2, tham so 3)
    }else{
        reject(tham so 1, tham so 2, tham so 3)
    }
})
3. Cách gọi
tenpromise.then((tham số 1, tham số 2, tham số 1)=>{
    // hàm xử lý trạng thái resolve
})
.catch((tham số 1, tham số 2, tham số 3)=>{
    // hàm xử lý trạng thái reject
})

* (Khi Náo Sử Dụng Promise Liên Tiếp)
- Khi các tác vụ bất đồng bộ có mối quan hệ về mặt thứ tự thì sử dụng Promise liên tiếp 


4. Thực hiện các Promise đồng thời với nhau
- Promise.all([Promise 1, Promise 2, Promise 3, ..., Promise n]) trong này chúng ta chuyền vào các mảng của Promise
=> Trả về một các mảng [Result 1, Result 2, Result 3, ..., Result n]
==> Thực hiện không theo tuần tự

VD:
Promise.all([sum(1,4), divide(10, 5), multiply(5, 5)])
    .then(res => {
        console.log("res = ", res)
    })
    .catch(err => {
        console.log("err = ", err)
})

*(Khi Nào Sử Dụng Promise.all)
- Trong trường hợp các tác vụ không có mối quan hệ về mặt thứ tự thì sử Promise.all

- Promise.race([Promise 1, Promise 2, Promise 3, ..., Promise n]) trong này chúng ta chuyền vào các mảng của Promise
=> Trả về một cái mảng [Result 1, Result 2, Result 3, ..., Result n]
==> Thời gian trả về sớm nhất thì nó in gia kết quả của thàng đấy luôn

VD:
Promise.all([sum(1,4), divide(10, 5), multiply(5, 5)])
    .then(res => {
        console.log("res = ", res)
    })
    .catch(err => {
        console.log("err = ", err)
})

*(Khi Nào Sử Dụng Promise.race)
- Chuyền vào danh sách các Promise nhưng nó trả về kết quả đầu tiến mà thực hiện xong sớm nhất 

==> Thực hiện các Promise tuần tự liên tiếp nhau, kết quả trả về là một mảng Promise liên tiếp thứ tự trả về là phụ thuộc
vào các Promise chuyền vào 
vd: Result 1 -> Promise 1

(
Sự khác nhau: Trong 3 tác vụ khi mà chúng ta muốn lấy kết quả của tác vụ trả về sớm nhất thì dùng Promise.race,
Còn muốn lấy kết quả của 3 cái tác vụ thì ta dùng Promise.all.
Thuông thường thì ta dùng Promise.all
)

5. async...await
- Viết function bất đồng bộ theo kiểu đồng bộ
- Khi 1 hàm được khai báo với từ khóa async thì tự động hàm đấy trở thành một Promise
- Để gọi 1 function async thì ta phải sử dụng từ khóa await
- await: tạm dừng chương trình để thực hiện tác vụ bất đồng bộ cho đến khi thực hiện thành công 
- await chỉ được khai báo nằm trong một async


